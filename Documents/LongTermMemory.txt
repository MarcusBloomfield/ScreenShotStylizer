# WebJobFinder Project Memory

## Project Overview
- WebJobFinder is a React TypeScript application that helps job seekers find relevant jobs by analyzing their resume
- The app uses OpenAI to extract search terms from resumes and evaluate job matches
- It scrapes job listings from sites like Seek, Indeed, and LinkedIn using Puppeteer
- The application consists of a React frontend and Express.js backend

## Components Structure
- ResumeUploader.tsx: Handles resume file uploads (PDF/DOCX)
- SearchTerms.tsx: Displays and manages job search terms
- JobList.tsx: Displays list of found jobs with match scores
- JobDetails.tsx: Modal showing detailed job information

## Frontend Services
- resumeParserService.ts: Interfaces with backend for resume parsing with fallback to mock implementation
- openAiService.ts: Interfaces with backend for OpenAI operations with fallback to mock implementation
- scrapeService.ts: Interfaces with backend for job scraping with fallback to mock implementation

## Backend Structure
- server.ts: Main Express server setup with routes and middleware
- controllers/: Handle API request processing and response formatting
  - scrapeController.ts: Job scraping API endpoints
  - resumeController.ts: Resume parsing API endpoints
  - openaiController.ts: OpenAI integration API endpoints
- services/: Business logic implementation
  - scrapeService.ts: Web scraping with Puppeteer and Cheerio
  - resumeParserService.ts: Extract and analyze resume content
  - openaiService.ts: Interface with OpenAI API for analysis
- routes/: Express route definitions
  - scrapeRoutes.ts: Job scraping routes
  - resumeRoutes.ts: Resume parsing routes
  - openaiRoutes.ts: OpenAI integration routes
- models/: Shared data models between frontend and backend

## Models
- Job.ts: Interface for job data
- Resume.ts: Interface for resume data

## Custom Hook
- useJobSearch.ts: Manages job search state and functionality

## Dependencies
### Frontend
- React & TypeScript
- Axios for API communication
- React-dropzone for file uploads
- React-modal for job details
- UUID for generating unique IDs

### Backend
- Express.js for API server
- TypeScript for type safety
- Puppeteer for web scraping
- Cheerio for HTML parsing
- PDF-parse and DOCX for resume parsing
- OpenAI API for analysis
- Multer for file upload handling
- CORS for cross-origin requests
- Morgan for request logging
- Dotenv for environment variables

## Implementation Details
- Uses a backend server for actual job scraping, resume parsing, and OpenAI integration
- Frontend services connect to backend APIs with fallback to mock implementations when backend unavailable
- Match scores are calculated by comparing resume content with job descriptions using OpenAI
- Designed with a responsive UI that works on mobile and desktop
- Backend handles memory-intensive operations like PDF parsing and web scraping

## Security Considerations
- OpenAI API key is stored in backend .env file, not exposed to client
- File uploads are validated for type and size
- Temporary files are cleaned up after processing

## Project Setup
- React and TypeScript frontend with Webpack for bundling
- Express.js and TypeScript backend
- Using Webpack for frontend bundling and development server
- Using Babel for transpilation
- Basic project structure with frontend in root src/ and backend in backend/src/

## Technologies
- React 19
- TypeScript
- Express.js
- Webpack 5
- Babel
- Puppeteer
- OpenAI API
- PDF and DOCX parsing

## Commands
- `npm start` - Starts the frontend development server
- `npm run build` - Creates a production build of the frontend
- `npm run setup-backend` - Sets up the backend (installs dependencies, creates .env, builds)
- `npm run backend` - Starts the backend development server
- `npm run dev` - Starts both frontend and backend concurrently

## API Endpoints
- `GET /api/health` - Check if the backend server is running
- `POST /api/scrape/site` - Scrape jobs from a specific job site
- `POST /api/scrape/jobs` - Scrape jobs from multiple job sites
- `POST /api/resume/parse` - Parse and extract information from a resume file
- `POST /api/openai/init` - Initialize OpenAI with API key
- `POST /api/openai/generate-search-terms` - Generate job search terms from a resume
- `POST /api/openai/evaluate-job-match` - Evaluate how well a job matches a resume 